quit<><>feems-workflow<> <>MMarr<> <>12/01/2024<><>

*******************************************************************************
*#fast estimation of effective migration surface (feems)           
*#is a python package implementing a statistical method for inferring 
*#and visualizing gene-flow in spatial population genetic data. Based on EEMS. 
*#EEMS github https://github.com/dipetkov/eems
*#FEEMS github https://github.com/NovembreLab/feems
*******************************************************************************

#modules req: 
module load igmm/apps/bcftools/1.20 
module load roslin/plink/1.09
module load roslin/python/3.8.10 
#tabix req - load in conda env 


<1. log into eddie rocky cores 
ssh -XY mmarr3@eddie.ecdf.ed.ac.uk
qlogin -N feems -l h_rt=10:00:00 -l h_vmem-16G -l rl9=true

<2. prepare snp data 
i. angsd run to call snps with no missing data and average min 4x coverage 

#!/bin/sh
# Grid Engine options
#$ -N angsdUL
#$ -cwd 
#$ -l h_rt=72:00:00
#$ -l h_vmem=32G
#$ -pe sharedmem 12
#$ -t 1:19
#$ -e e_angsdUL
#$ -o o_angsdUL
#$ -l rl9=true

#estimates genotype likelihoods with GATK
#calulates allele frequencies 
#calls and filters SNPS 

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# Load Dependencies and setup env variables #
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#Initialise the Modules environment
. /etc/profile.d/modules.sh

#Load java
module add java
#angsd=/exports/cmvm/eddie/eb/groups/clark_grp2/software/angsd
#bams="/exports/eddie/scratch/mmarr3/snps_gls/bamlistpaths.txt"
#target_dir=/exports/eddie/scratch/mmarr3/feems
#ref_gen=/exports/eddie/scratch/mmarr3/ref_genome/svul_refgen.fa

#run and input parameters 
#$angsd/angsd \
#  -bam $bams \
#  -ref $ref_gen \
#  -P 12 \
#  -out $target_dir/chr${SGE_TASK_ID}_pruned \
#  -r ${SGE_TASK_ID} \
#  -uniqueOnly 1 \
#  -minInd 108 \
#  -remove_bads 1 \
#  -only_proper_pairs 1 \
#  -trim 0 \
#  -C 50 \
#  -baq 1 \
#  -minMapQ 30 \
#  -minQ 20 \
#  -doCounts 1 \
#  -GL 2 \
#  -doGlf 2 \
#  -doMajorMinor 4 \
#  -doMaf 1 \
#  -SNP_pval 1e-06 \
#  -doPost 1 \
#  -doGeno 2 \
#  -setMinDepth 376 \
#  -setMaxDepth 750 \
#  -dobcf 1

#ii. concat bcf files 
bcftools concat chr{1..19}_pruned.bcf -Oz -o svul_concat_pruned.vcf.gz
bcftools view -H svul_concat_pruned.vcf.gz | wc -l

#iii. rename samples, extract scottish, sort, index
bcftools reheader --samples sam_change.txt -o svul_concat_pruned_renamed.vcf.gz  svul_concat_pruned.vcf.gz
bcftools view -S ^ex_sam.txt -Oz -o svul_concat_pruned_renamed_final.vcf.gz svul_concat_pruned_renamed.vcf.gz

bcftools sort -Oz -o svul_concat_pruned_renamed_final_sorted.vcf.gz svul_concat_pruned_renamed_final.vcf.gz
tabix -p vcf svul_concat_pruned_renamed_final_sorted.vcf.gz

#v. prune for ld, convert to plink format
plink --vcf svul_concat_pruned_renamed_final_sorted.vcf.gz --set-missing-var-ids @:#  --recode vcf --maf 0.05 --geno 0 --allow-extra-chr --out squirrel_feems_filt
#51632 variants removed due to minor allele threshold(s)

plink --vcf squirrel_feems_filt.vcf --allow-extra-chr --indep-pairwise 50 10 0.1 --out squirrel_feems_filt
#60458 of 71420 variants removed.

plink --vcf squirrel_feems_filt.vcf --extract squirrel_feems_filt.prune.in --recode vcf --allow-extra-chr --out squirrel_feems_filt_ld
#10962 variants and 94 people pass filters and QC.

#iii. generate plink files 
plink --vcf squirrel_feems_filt_ld.vcf --allow-extra-chr --recode --out squirrel_feems_filt_ld
plink --file squirrel_feems_filt_ld --allow-extra-chr --make-bed --out squirrel_feems_filt_ld


<3. create spatial input files

	i. create .coord file #lat and long coordinates for every sample in corresponding order to sample order in txt file
	ii. create .outer file #lat and long coordinates of the boundary area of interest using http://www.birdtheme.org/useful/v3tool.html 
                        #note first and last coordinate must be the same to create polygon 
	iii. create custom grid in R #feems provides a 100km and 250km world grid. This won't work for smaller regions that needs a denser grid. 
	
#The following is for creating a triangular 10km for scotland. Requires a shapefile of area. Check DGGRID C++ manual for original description, 
#ggridR is adapted for R. See doc for different resolution. 
          install.packages("dggridR")
          library(dggridR)
          install.packages("ggplot2")
          library (ggplot2)
          require(sf)
          
          setwd("C:/Users/melis/Documents/r_data/svul_feems")

#create discrete global grid
dggs <- dgconstruct(spacing=5, metric=FALSE, resround='nearest', projection='ISEA', aperture = 4, topology = "TRIANGLE")

#read in uk shapefile 
scotne_border <- st_read(".", layer="scot_ne")
st_crs(scotne_border)=4326

#view boundary
plot(scotne_border)

shape <- read_sf(dsn = ".", layer = "scot_ne")

#create grid
grid <- dgshptogrid(dggs, "scot_ne.shp", cellsize = 0.01, savegrid=".")

#plot
p <- ggplot() +
  geom_sf(data=scotne_border, fill=NA, color="black") +
  geom_sf(data=grid, fill=alpha("blue", 0.4), color=alpha("white", 0.4))
p


<4. Create env and install feems 

i. create conda environment
	
mamba create -n feems 
mamba activate feems 
mamba install -c bioconda feems -c conda-forge
#had to do additional installs
mamba install anaconda::tqdm 
mamba install conda-forge::cffi
#may also have to change np.int to int and np.float to float in env/feems/lib/python3.9/site-packages/feems/spatial_grapy.py
          
	ii. enable multiple lines to be pasted into python
echo "set enable-bracketed-paste off" >> ~/.inputrc 
            
    iii. Run feems #this can all be done with an jupyter notebook 
    
#start
python
         
#load packages 
# base
import numpy as np
import pkg_resources
from sklearn.impute import SimpleImputer
from pandas_plink import read_plink
import os 

# viz
import matplotlib.pyplot as plt
import matplotlib as mpl
import cartopy.crs as ccrs
import matplotlib #this isn't in instructions but required for pop out graphics on sge 
matplotlib.use('tkagg') #as above 

# feems
from feems.utils import prepare_graph_inputs
from feems import SpatialGraph, Viz

# change matplotlib fonts
plt.rcParams["font.family"] = "Arial"
plt.rcParams["font.sans-serif"] = "Arial"

#data_path = pkg_resources.resource_filename("feems", "data/")
data_path = ("feems/", "data/") 
  
	 
	 
#test that graphics work #should open a graphics window and save file as pgn
x = np.linspace(0, 10, 100)
fig = plt.figure()
plt.plot(x, np.sin(x), '-')
plt.plot(x, np.cos(x), '--');
         
plt.show()
fig.savefig('my_figure.png')
         
#run analyses 
         
#read the genotype data and mean impute missing data
(bim, fam, G) = read_plink("squirrel_feems_filt_ld")
imp = SimpleImputer(missing_values=np.nan, strategy="mean")
genotypes = imp.fit_transform((np.array(G)).T)

print("n_samples={}, n_snps={}".format(genotypes.shape[0], genotypes.shape[1]))
         
#read in data 
coord = np.loadtxt("squirrel.coord")  # sample coordinates
outer = np.loadtxt("squirrel.outer")  # outer coordinates
grid_path = ("dggrid.shp")  # path to discrete global grid
         
#graph input files
outer, edges, grid, _ = prepare_graph_inputs(coord=coord, 
                                             ggrid=grid_path,
                                             translated=False, # doc recommend TRUE but didnt work for me
                                             buffer=0,
                                             outer=outer)

#view data
outer[:5, ]
edges[:5, ]
grid[:5, ]
         
sp_graph = SpatialGraph(genotypes, coord, grid, edges, scale_snps=False)

projection = ccrs.EquidistantConic(central_longitude=-4.203532, central_latitude=56.587083) #change lon and lat to centre coords of your dataset 

#plot no weights. 
fig = plt.figure(dpi=300)
ax = fig.add_subplot(1, 1, 1, projection=projection)  
v = Viz(ax, sp_graph, projection=projection, edge_width=.5, 
        edge_alpha=1, edge_zorder=100, sample_pt_size=10, 
        obs_node_size=7.5, sample_pt_color="black", 
        cbar_font_size=10)
v.draw_map()
v.draw_samples()
v.draw_edges(use_weights=False)
v.draw_obs_nodes(use_ids=False)
fig.savefig('feems_noweights.png')

#plot weighted
sp_graph.fit(lamb = 10.0)

fig = plt.figure(dpi=300)
ax = fig.add_subplot(1, 1, 1, projection=projection)  
v = Viz(ax, sp_graph, projection=projection, edge_width=.5, 
        edge_alpha=1, edge_zorder=100, sample_pt_size=20, 
        obs_node_size=7.5, sample_pt_color="black", 
        cbar_font_size=8)
v.draw_map()
v.draw_edges(use_weights=True)
v.draw_obs_nodes(use_ids=False) 
v.draw_edge_colorbar()
fig.savefig('feems_10.png')

sp_graph.fit(lamb = 5.0)

fig = plt.figure(dpi=300)
ax = fig.add_subplot(1, 1, 1, projection=projection)  
v = Viz(ax, sp_graph, projection=projection, edge_width=.5, 
        edge_alpha=1, edge_zorder=100, sample_pt_size=20, 
        obs_node_size=7.5, sample_pt_color="black", 
        cbar_font_size=8)
v.draw_map()
v.draw_edges(use_weights=True)
v.draw_obs_nodes(use_ids=False) 
v.draw_edge_colorbar()
fig.savefig('feems_5.png')

sp_graph.fit(lamb = 2.0)

fig = plt.figure(dpi=300)
ax = fig.add_subplot(1, 1, 1, projection=projection)  
v = Viz(ax, sp_graph, projection=projection, edge_width=.5, 
        edge_alpha=1, edge_zorder=100, sample_pt_size=20, 
        obs_node_size=7.5, sample_pt_color="black", 
        cbar_font_size=8)
v.draw_map()
v.draw_edges(use_weights=True)
v.draw_obs_nodes(use_ids=False) 
v.draw_edge_colorbar()
fig.savefig('feems_2.png')

################################################################################run cross validation############################################################################################# 
#assumes starting from scratch 
#activate feesms conda environmenyt 
conda activate feems2

#load pythin packages 
# base
import numpy as np
import pkg_resources
from sklearn.impute import SimpleImputer
from pandas_plink import read_plink
import statsmodels.api as sm

# viz
import matplotlib.pyplot as plt
from matplotlib import gridspec
import cartopy.crs as ccrs

# feems
from feems.utils import prepare_graph_inputs
from feems import SpatialGraph, Viz
from feems.cross_validation import run_cv

# change matplotlib fonts
plt.rcParams["font.family"] = "Arial"
plt.rcParams["font.sans-serif"] = "Arial"

#set data path
data_path = data_path = (".", ".") 

# read the genotype data and mean impute missing data
(bim, fam, G) = read_plink("squirrel_feems_filt_ld".format(data_path))
imp = SimpleImputer(missing_values=np.nan, strategy="mean")
genotypes = imp.fit_transform((np.array(G)).T)

# setup graph
coord = np.loadtxt("squirrel.coord".format(data_path))  # sample coordinates
outer = np.loadtxt("squirrel.outer".format(data_path))  # outer coordinates
grid_path = "/exports/cmvm/eddie/eb/groups/ogden_grp/melissa_ogden/svul_rev/mapped/dggrid.shp".format(data_path)  # path to discrete global grid

# graph input files
outer, edges, grid, _ = prepare_graph_inputs(coord=coord, 
                                             ggrid=grid_path,
                                             translated=False, 
                                             buffer=0,
                                             outer=outer)

# construct spatial graph object
sp_graph = SpatialGraph(genotypes, coord, grid, edges, scale_snps=True)

# define grids
# reverse the order of lambdas and alphas for warmstart
lamb_grid = np.geomspace(1e-6, 1e2, 20)[::-1]

# run cross-validation
cv_err = run_cv(sp_graph, lamb_grid, n_folds=sp_graph.n_observed_nodes, factr=1e10)

# average over folds
mean_cv_err = np.mean(cv_err, axis=0)

# argmin of cv error
lamb_cv = float(lamb_grid[np.argmin(mean_cv_err)])

fig, ax = plt.subplots(dpi=300)
ax.plot(np.log10(lamb_grid), mean_cv_err, ".");
ax.set_xlabel("log10(lambda)");
ax.set_ylabel("L2 CV Error");
ax.axvline(np.log10(lamb_cv), color = "orange")
fig.savefig('cv.png')

# figure params
projection = ccrs.EquidistantConic(central_longitude=-4.203532, central_latitude=56.587083)
title_loc = "left"
title_pad = "-10"
title_fontsize = 18
edge_width = .2
edge_alpha = 1
edge_zorder = 3
obs_node_size = 3
obs_node_linewidth = .4
cbar_font_size = 8
cbar_ticklabelsize = 8
cbar_orientation = "horizontal"


# figure setup
fig = plt.figure(figsize=(12, 8), dpi=600)
spec = gridspec.GridSpec(ncols=2, nrows=2, figure=fig, wspace=0.0, hspace=0.0)

# axis 00 
ax_00 = fig.add_subplot(spec[0, 0], projection=projection)
ax_00.set_title("A", loc=title_loc, pad=title_pad, fontdict={"fontsize": title_fontsize})
sp_graph.fit(float(lamb_grid[0]))
v = Viz(ax_00, sp_graph, projection=projection, edge_width=edge_width, 
        edge_alpha=1, edge_zorder=100, sample_pt_size=20, 
        obs_node_size=obs_node_size, sample_pt_color="black", 
        cbar_font_size=10)
v.draw_map()
v.draw_edges(use_weights=True)
v.draw_obs_nodes(use_ids=False) 
ax_00.text(.2, .85, "lambda={:.5f}\ncv l2 error={:.5f}".format(lamb_grid[0], mean_cv_err[0, 0]), 
           fontdict={"fontsize": 4}, transform = ax_00.transAxes)


# axis 10
ax_10 = fig.add_subplot(spec[1, 0], projection=projection)
ax_10.set_title("B", loc=title_loc, pad=title_pad, fontdict={"fontsize": title_fontsize})
sp_graph.fit(float(lamb_grid[3]))
v = Viz(ax_10, sp_graph, projection=projection, edge_width=edge_width, 
        edge_alpha=1, edge_zorder=100, sample_pt_size=20,
        obs_node_size=obs_node_size, sample_pt_color="black", 
        cbar_font_size=10)
v.draw_map()
v.draw_edges(use_weights=True)
v.draw_obs_nodes(use_ids=False) 
ax_10.text(.2, .85, "lambda={:.5f}\ncv l2 error={:.5f}".format(lamb_grid[3], mean_cv_err[3, 0]), 
           fontdict={"fontsize": 4}, transform = ax_10.transAxes)

# axis 01
ax_01 = fig.add_subplot(spec[0, 1], projection=projection)
ax_01.set_title("C", loc=title_loc, pad=title_pad, fontdict={"fontsize": title_fontsize})
sp_graph.fit(float(lamb_cv))
v = Viz(ax_01, sp_graph, projection=projection, edge_width=edge_width, 
        edge_alpha=1, edge_zorder=100, sample_pt_size=20, 
        obs_node_size=obs_node_size, sample_pt_color="black", 
        cbar_font_size=10)
v.draw_map()
v.draw_edges(use_weights=True)
v.draw_obs_nodes(use_ids=False) 
ax_01.text(.2, .85, "lambda={:.5f}\ncv l2 error={:.5f}".format(lamb_cv, mean_cv_err[np.argmin(mean_cv_err), 0]), 
           fontdict={"fontsize": 4}, transform = ax_01.transAxes)

# axis 11
ax_11 = fig.add_subplot(spec[1, 1], projection=projection)
ax_11.set_title("D", loc=title_loc, pad=title_pad, fontdict={"fontsize": title_fontsize})
sp_graph.fit(float(lamb_grid[10]))
v = Viz(ax_11, sp_graph, projection=projection, edge_width=edge_width, 
        edge_alpha=1, edge_zorder=100, sample_pt_size=20, 
        obs_node_size=obs_node_size, sample_pt_color="black", 
        cbar_font_size=10)
v.draw_map()
v.draw_edges(use_weights=True)
v.draw_obs_nodes(use_ids=False)
v.cbar_font_size = cbar_font_size
v.cbar_orientation = cbar_orientation
v.cbar_ticklabelsize = cbar_ticklabelsize
v.draw_edge_colorbar()
ax_11.text(.2, .85, "lambda={:.5f}\ncv l2 error={:.5f}".format(lamb_grid[10], mean_cv_err[10, 0]), 
           fontdict={"fontsize": 4}, transform = ax_11.transAxes)

# re-fit
sp_graph.fit(lamb_cv)

# plot
fig = plt.figure(dpi=600)
ax = fig.add_subplot(1, 1, 1, projection=projection)  
v = Viz(ax, sp_graph, projection=projection, edge_width=.5, 
        edge_alpha=1, edge_zorder=100, sample_pt_size=20, 
        obs_node_size=7.5, sample_pt_color="black", 
        cbar_font_size=8)
v.draw_map()
v.draw_edges(use_weights=True)
v.draw_obs_nodes(use_ids=False) 
v.draw_edge_colorbar()
fig.savefig('feems_final.png')
